# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestPositiveTestRegisterSuccess():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_positiveTestRegisterSuccess(self):
    # Test name: Positive Test - Register Success
    # Step # | name | target | value
    # 1 | open | /app/gabung | 
    self.driver.get("https://www.cermati.com/app/gabung")
    # 2 | setWindowSize | 1296x696 | 
    self.driver.set_window_size(1296, 696)
    # 3 | click | id=mobilePhone | 
    self.driver.find_element(By.ID, "mobilePhone").click()
    # 4 | type | id=mobilePhone | 085174319872
    self.driver.find_element(By.ID, "mobilePhone").send_keys("085174319872")
    # 5 | click | id=email | 
    self.driver.find_element(By.ID, "email").click()
    # 6 | type | id=email | rendradwipranoto@gmail.com
    self.driver.find_element(By.ID, "email").send_keys("rendradwipranoto@gmail.com")
    # 7 | click | id=firstName | 
    self.driver.find_element(By.ID, "firstName").click()
    # 8 | type | id=firstName | Rendra
    self.driver.find_element(By.ID, "firstName").send_keys("Rendra")
    # 9 | click | id=lastName | 
    self.driver.find_element(By.ID, "lastName").click()
    # 10 | type | id=lastName | Dwi Pranoto
    self.driver.find_element(By.ID, "lastName").send_keys("Dwi Pranoto")
    # 11 | click | css=.RegistrationForm_form-container__button-text__G_fL8 | 
    self.driver.find_element(By.CSS_SELECTOR, ".RegistrationForm_form-container__button-text__G_fL8").click()
    # 12 | pause | 5000 | 
    time.sleep(5000)
    # 13 | click | css=.moe-main-class:nth-child(44) #blockNotif | 
    self.driver.find_element(By.CSS_SELECTOR, ".moe-main-class:nth-child(44) #blockNotif").click()
    # 14 | click | css=.LinkWithCountdown_resend-link__text__Xm8rW:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".LinkWithCountdown_resend-link__text__Xm8rW:nth-child(1)").click()
    # 15 | click | css=.text-center > .btn_SGZcZ | 
    self.driver.find_element(By.CSS_SELECTOR, ".text-center > .btn_SGZcZ").click()
    # 16 | click | css=.btn--secondary_4gXBW | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn--secondary_4gXBW").click()
    # 17 | type | id=pin-input-0 | 7
    self.driver.find_element(By.ID, "pin-input-0").send_keys("7")
    # 18 | type | id=pin-input-1 | 7
    self.driver.find_element(By.ID, "pin-input-1").send_keys("7")
    # 19 | type | id=pin-input-2 | 1
    self.driver.find_element(By.ID, "pin-input-2").send_keys("1")
    # 20 | type | id=pin-input-3 | 8
    self.driver.find_element(By.ID, "pin-input-3").send_keys("8")
    # 21 | type | id=pin-input-4 | 2
    self.driver.find_element(By.ID, "pin-input-4").send_keys("2")
    # 22 | type | id=pin-input-5 | 0
    self.driver.find_element(By.ID, "pin-input-5").send_keys("0")
    # 23 | click | css=.btn--action_kallT | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn--action_kallT").click()
    # 24 | mouseOver | css=.btn--block_AZwP5 | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".btn--block_AZwP5")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 25 | type | id=pin-input-0 | 8
    self.driver.find_element(By.ID, "pin-input-0").send_keys("8")
    # 26 | type | id=pin-input-1 | 8
    self.driver.find_element(By.ID, "pin-input-1").send_keys("8")
    # 27 | type | id=pin-input-2 | 1
    self.driver.find_element(By.ID, "pin-input-2").send_keys("1")
    # 28 | type | id=pin-input-3 | 8
    self.driver.find_element(By.ID, "pin-input-3").send_keys("8")
    # 29 | type | id=pin-input-4 | 2
    self.driver.find_element(By.ID, "pin-input-4").send_keys("2")
    # 30 | type | id=pin-input-5 | 8
    self.driver.find_element(By.ID, "pin-input-5").send_keys("8")
    # 31 | type | id=pin-input-0 | 8
    self.driver.find_element(By.ID, "pin-input-0").send_keys("8")
    # 32 | type | id=pin-input-1 | 8
    self.driver.find_element(By.ID, "pin-input-1").send_keys("8")
    # 33 | type | id=pin-input-2 | 1
    self.driver.find_element(By.ID, "pin-input-2").send_keys("1")
    # 34 | type | id=pin-input-3 | 8
    self.driver.find_element(By.ID, "pin-input-3").send_keys("8")
    # 35 | type | id=pin-input-4 | 2
    self.driver.find_element(By.ID, "pin-input-4").send_keys("2")
    # 36 | type | id=pin-input-5 | 8
    self.driver.find_element(By.ID, "pin-input-5").send_keys("8")
